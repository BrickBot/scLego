.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH SCLEGO 1 "perl 5.005, patch 03" "2/Mar/2000" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
scLego ocLego sscLego \- Lego C code generator
.SH "SYNOPSIS"
.PP
.Vb 3
\&    scLego [scoc options] file.sc
\&    ocLego [sscoc options] file.oc
\&    sscLego [sscc options] file.ssc
.Ve
.SH "DESCRIPTION"
Generates C code for Legos. Can be used as any Esterel C code
generator. Copy \fBscLego\fR into the Esterel distribution \fIbin\fR
directory, then creates hardlinks \fBocLego\fR \-> \fBscLego\fR and
\fBsscLego\fR \-> \fBscLego\fR. Code generators can be called using
the following commands:
.Ip "Interpreted C code" 3
.Sp
.Vb 1
\&    esterel -ILego foo.strl
.Ve
.Ip "Automaton C code" 3
.Sp
.Vb 1
\&    esterel -ALego foo.strl
.Ve
.Ip "Equation C code" 3
.Sp
.Vb 1
\&    esterel -LLego foo.strl
.Ve
.PP
Code for simulation is also possible using the \fB\-simul\fR option.
.PP
\fBscLego\fR expects one or several predefined objects to be used. The
next section \s-1API\s0 describes the Esterel specific \s-1API\s0 that must be used.
.PP
\fBscLego\fR parses the Esterel intermediate code given as input and
defined the value of the constants if not defined in the Esterel
code. Then it calls the actual C code generator. Finally, it modifies
the generated C code to add output function definitions and a \fBmain\fR
function.
.Sh "\s-1API\s0"
.PP
.Vb 73
\& % STANDARD ESTEREL / LEGO INTERFACE
\& %----------------------------------
\& % Inputs are related to Lego sensors 1, 2 or 3.
\& % If input i is contected to a given type of sensor, say contact 
\& % sensor, then one cannot use the inputs associated to another 
\& % type. This will be checked at compile time.
\& % Constants without initial value are already known. There is no 
\& % need to set them in the C generated file.
\& 
\& % time control
\& %-------------
\& % Tells how many times the controller is called within one second.
\& % User can change the default value of 100, which may be omitted.
\& % Automaton is run each 1000 / TICKS_PER_SECOND ms.
\& constant TICKS_PER_SECOND = 100 : integer;  
\& 
\& % Engine control
\& %---------------
\& constant MOTOR_OFF   : integer,
\&          MOTOR_FWD   : integer,
\&          MOTOR_REV   : integer,
\&          MOTOR_BRAKE : integer;
\& 
\& % If argument is MOTOR_FWD, return MOTOR_REV and vice versa
\& function CHANGE_MOTOR_DIR (integer) : integer; 
\& 
\& constant MAX_SPEED = 255 : integer;
\& 
\& output MOTOR_A_DIR   := MOTOR_OFF : integer, 
\&        MOTOR_A_SPEED := 0         : integer;
\& 
\& output MOTOR_B_DIR   := MOTOR_OFF : integer,
\&        MOTOR_B_SPEED := 0         : integer;
\& 
\& output MOTOR_C_DIR   := MOTOR_OFF : integer,
\&        MOTOR_C_SPEED := 0         : integer;
\& 
\& % Contact sensors
\& %----------------
\& input TOUCH_1;
\& input TOUCH_2;
\& input TOUCH_3;
\& 
\& % Light sensors
\& %--------------
\& constant DEFAULT_LIGHT_THRESHHOLD = 50 : integer;
\& 
\& sensor LIGHT_1_VALUE : integer;  % current light measure 
\&                                  % set light sensor threshhold
\& output SET_LIGHT_1_THRESHHOLD := DEFAULT_LIGHT_THRESHHOLD : integer; 
\& input  LIGHT_LOW_1;              % pure signal if below threshhold
\& input  LIGHT_HIGH_1;             % pure signal if above threshhold
\& 
\& sensor LIGHT_2_VALUE : integer; 
\& output SET_LIGHT_2_THRESHHOLD := DEFAULT_LIGHT_THRESHHOLD : integer;
\& input  LIGHT_LOW_2; 
\& input  LIGHT_HIGH_2;
\& 
\& sensor LIGHT_3_VALUE : integer;
\& output SET_LIGHT_3_THRESHHOLD : integer; 
\& input  LIGHT_LOW_3; 
\& input  LIGHT_HIGH_3;
\& 
\& % If argument is MOTOR_FWD, returns MOTOR_REV and vice versa.
\& % Else returns argument. Automatically defined in C generated 
\& % code.
\& function CHANGE_MOTOR_DIR(integer) : integer;
\& 
\& 
\& % Screen display
\& %---------------
\& output CPUTS : string;
\& 
.Ve
.SH "OPTIONS"
Options are the same as the Esterel C code generator options. With
\fB\-simul\fR option, there is no \fBmain\fR function nor output functions
defined and the C generated can be compiled and tested using \fBxes\fR.
.SH "SEE ALSO"
the \fIesterel\fR manpage, the \fIscc\fR manpage, the \fIocc\fR manpage, the \fIsscc\fR manpage
.SH "AUTHOR"
Xavier Fornari <\fIXavier.Fornari@sophia.inria.fr\fR>

.rn }` ''
.IX Title "SCLEGO 1"
.IX Name "scLego ocLego sscLego - Lego C code generator"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "Interpreted C code"

.IX Item "Automaton C code"

.IX Item "Equation C code"

.IX Subsection "\s-1API\s0"

.IX Header "OPTIONS"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

